---
openapi: 3.0.0
info:
  title: Users management
  description: |
    **Users Management API** manages Users . API provides typical CRUD operations for Resources and their Collections.
  termsOfService: https://example.com/terms
  contact:
    name: Aymen El Heni
    url: https://support.example.com/apis
    email: support-apis@example.com
  license:
    name: Creative Commons 4.0
    url: https://creativecommons.org/licenses/by/4.0/
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/aymanochko/usersmanagement/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:5000
  description: Development Server
- url: https://api.example.com/v2
  description: Production Server
tags:
- name: users
  description: User Resource Operations and Models
paths:
  /users:
    get:
      tags:
      - users
      summary: List and filter Users Collection
      description: |-
        Retrieve a list of User Resources matching optional filter.
        List pagination and sorting are supported through dedicated URL Query String parameters.
      operationId: get-users
      parameters:
      - name: username
        in: query
        description: Matches Users with this value of username attribute. Use comma separated list of names for logical alternative
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: jonh,terry1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      href:
                        type: string
                        description: URI of the User Resource
                        format: uri
              examples: {}
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "406":
          description: Not Acceptable
      security:
      - APIKey: []
    post:
      tags:
      - users
      summary: Create User
      description: Create new User using Representation in Request Body
      operationId: post-users
      requestBody:
        description: 'All mutable attributes must be present: ''username'', ''firstname'', ''lastname'', ''contact.email'' and ''contact.phone''. ''id'' in Request Data JSON Object is ignored, if present.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: URI of new User Resource
              style: simple
              explode: false
              schema:
                type: string
                format: uri
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "406":
          description: Not Acceptable
      security:
      - JWTBearerToken: []
  /users/{id}:
    get:
      tags:
      - users
      summary: Retrieve User Resource Representation
      description: Returns User Resource in JSON format
      operationId: get-user-userid
      parameters:
      - name: id
        in: path
        description: Unique id of User Resource
        required: true
        style: simple
        explode: false
        schema:
          minimum: 0
          type: integer
          example: 123
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "406":
          description: Not Acceptable
      security:
      - APIKey: []
components:
  schemas:
    User:
      title: User Resource Model
      type: object
      properties:
        id:
          minimum: 0
          type: integer
          description: System generated; unique identification of User Resource; cannot be reused after User is deleted
          example: 123
        username:
          maxLength: 20
          minLength: 3
          pattern: ^[A-Za-z]\w*$
          type: string
          description: username must be unique among currently existing Users; client mutable
          example: john1
        firstName:
          maxLength: 30
          minLength: 1
          pattern: ^\w[\w\-]*$
          type: string
          example: John
        lastName:
          maxLength: 30
          minLength: 1
          pattern: ^\w[\w\-]*$
          type: string
          example: Cleese
        email:
          type: string
          format: email
          example: john.cleese@example.com
        phoneNumber:
          maxLength: 10
          minLength: 10
          pattern: ^0[6-7]{1}[0-9]{9}$
          type: string
          example: "0613125565"
        password:
          maxLength: 20
          minLength: 8
          type: string
          example: MyP@ssword
        birthDate:
          maxLength: 8
          minLength: 8
          pattern: ^[0-9]{8}$
          type: string
          format: date
        country:
          maxLength: 2
          minLength: 2
          pattern: ^[A-Z]{2}$
          type: string
          example: FR
      description: 'User Data Model includes all Resource object attributes: client mutable and server generated'
  securitySchemes:
    APIKey:
      type: apiKey
      description: Global Application Users Service API Key
      name: X-API-Key
      in: header
    JWTBearerToken:
      type: http
      description: JWT Bearer Token for Resource modification operations
      scheme: bearer
