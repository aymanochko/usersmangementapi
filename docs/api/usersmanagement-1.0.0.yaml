openapi: 3.0.0
tags:
  - name: users
    description: Simple users
info:
  title: Users management
  version: 1.0.0
  description: |
    **Users Management API** manages Users . 

  contact:
    name: Aymen El Heni
    url: 'https://support.example.com/apis'
    email: support-apis@example.com
  termsOfService: 'https://example.com/terms'
  license:
    name: Creative Commons 4.0
    url: 'https://creativecommons.org/licenses/by/4.0/'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/aymanochko/usersmanagement/1.0.0
  - description: Development Server
    url: http://localhost:8887/rest/api/
paths:
  /users:
    get:
      summary: List and filter Users Collection
      operationId: userByUsername
      description: |-
        Retrieve a user using the username criteria
      parameters:
        - schema:
            type: string
            example: 'john'
          in: query
          name: username
          description: Matches Users with this value of username attribute.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/User'
                    - type: object
                      properties:
                        href:
                          type: string
                          format: uri
                          description: URI of the User Resource
              examples: {}
        '400':
          description: Bad Request
        '406':
          description: Not Acceptable
      tags:
        - users
    post:
      summary: Create User 
      operationId: addUser
      responses:
        '201':
          description: Create a user after validating the posted attributes
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URI of new User Resource
        '400':
          description: Bad Request
        '406':
          description: Not Acceptable
      description: Create new User using Representation in Request Body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: "All mutable attributes must be present: 'username', 'firstname', 'lastname', 'email', 'phoneNumber' and 'country'. 'id' in Request Data JSON Object is ignored, if present."
      tags:
        - users
  '/users/{id}':
    parameters:
      - schema:
          type: string
          example: "60fddfcd4ca52728e7568c28"
        name: id
        in: path
        required: true
        description: Unique id of User Resource
    get:
      summary: Retrieve User Resource Representation
      operationId: user
      description: Returns User Resource in JSON format
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '406':
          description: Not Acceptable
      tags:
        - users
components:
  schemas:
    User:
      title: User Resource Model
      type: object
      description: 'User Data Model includes all Resource object attributes'
      properties:
        id:
          type: string
          description: System generated; unique identification of User Resource; cannot be reused after User is deleted
          example: "60fddfcd4ca52728e7568c28"
        username:
          type: string
          description: username must be unique among currently existing Users; client mutable
          example: 'john1'
          minLength: 3
          maxLength: 20
        firstName:
          type: string
          example: 'John'
          minLength: 1
          maxLength: 30
        lastName:
          type: string
          example: 'Cleese'
          minLength: 1
          maxLength: 30
        email:
          type: string
          example: 'john.cleese@example.com'
          format: email
        phoneNumber:
          type: string
          example: '0613125565'
          pattern: "^0[6-7]{1}[0-9]{9}$"
          minLength: 10
          maxLength: 10
        password:
          type: string
          example: 'MyP@ssword'
          minLength: 8
          maxLength: 20
        birthDate:
          type: string
          format: date
          example: '02042001'
          pattern: '^[0-9]{8}$'
          minLength: 8
          maxLength: 8
        country:
          type: string
          example: 'FR'
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2